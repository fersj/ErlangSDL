{spec,
  % {GENERATOR_INFO, erl_file_gen, hrl_file_gen, erl_module_name, port_name,  c_file_gen, c_handler_file, c_lib_import}
  {generator_info, "generated/sdl_ports_gen.erl", "generated/sdl_ports_gen.hrl", "sdl_ports_gen", "sdl_port", "generated/sdl_ports_gen.c", "../sdl_generator/generated/sdl_ports_gen", "SDL2/SDL.h"},
  {erlang_header,
"-compile(export_all)."
  },
  {c_header,
"typedef struct {
	int id;
	int values[10];
} ArrayA;

typedef struct {
	int id;
	int *values;
} ArrayB;

typedef struct {
	int id;
	int *values;
	int size;
} ArrayC;

int max (int *array, int size) {
	int max = -2147483648;

	for (int i=0; i<size; i++) {
		if (array[i]>max) max=array[i];
	}

	return max;
}"
  },
  [
    {macro_spec, "SDL_INIT_TIMER", "16#00000001"},
    {macro_spec, "SDL_INIT_AUDIO", "16#00000010"},
    {macro_spec, "SDL_INIT_VIDEO", "16#00000020"},
    {macro_spec, "SDL_QUIT", "16#100"},
    {macro_spec, "SDL_WINDOW_SHOWN", "16#00000004"},
    {macro_spec, "SDL_WINDOWPOS_CENTERED", "16#2fff0000"},
    {macro_spec, "SDL_KEYDOWN", "16#300"},
    {macro_spec, "SDL_KEYUP", "16#301"},
    {macro_spec, "SDLK_SCANCODE_MASK", "16#40000000"},
    {macro_spec, "SDLK_SPACE", "$\\s"},
    {macro_spec, "SDLK_ESCAPE", "$\\033"},
    {macro_spec, "SDLK_RIGHT", "79 bor ?SDLK_SCANCODE_MASK"},
    {macro_spec, "SDLK_LEFT", "80 bor ?SDLK_SCANCODE_MASK"},
    {macro_spec, "SDLK_DOWN", "81 bor ?SDLK_SCANCODE_MASK"},
    {macro_spec, "SDLK_UP", "82 bor ?SDLK_SCANCODE_MASK"}
  ],
  [
    {type_spec, arrayA, "ArrayA",
      {struct, [
        {struct_member, id, "id", int, []},
        {struct_member, values, "values", {fixed_array, int, 10}, []}
      ]}, []},
    {type_spec, arrayB, "ArrayB",
      {struct, [
        {struct_member, id, "id", int, []},
        {struct_member, values, "values", {pointer, int}, []}
      ]}, []},
    {type_spec, arrayC, "ArrayC",
      {struct, [
        {struct_member, id, "id", int, []},
        {struct_member, values, "values", {pointer, int}, []},
        {struct_member, size, "size", int, [{length_of,2}]}
      ]}, []},
    {type_spec, uint64, "Uint64", {int, 64}, [unsigned]},
    {type_spec, uint32, "Uint32", {int, 32}, [unsigned]},
    {type_spec, uint16, "Uint16", {int, 16}, [unsigned]},
    {type_spec, uint8, "Uint8", {int, 8}, [unsigned]},
    {type_spec, sint64, "Sint64", {int, 64}, []},
    {type_spec, sint32, "Sint32", {int, 32}, []},
    {type_spec, sint16, "Sint16", {int, 16}, []},
    {type_spec, sint8, "Sint8", {int, 8}, []},
    {type_spec, window, "SDL_Window", {struct, opaque}, []},
    {type_spec, color, "SDL_Color", {struct, [
      {struct_member, r, "r", uint8, []},
      {struct_member, g, "g", uint8, []},
      {struct_member, b, "b", uint8, []},
      {struct_member, a, "a", uint8, []}
      ]}, []},
    {type_spec, palette, "SDL_Palette",
      {struct, [
        {struct_member, ncolors, "ncolors", int, []},
        {struct_member, colors, "colors", {pointer, color}, []},
        {struct_member, version, "version", uint32, [internal]},
        {struct_member, refcount, "refcount", int, [internal]}
      ]}, []},
    {type_spec, pixel_format, "SDL_PixelFormat",
      {struct, [
        {struct_member, format, "format", uint32, []},
        {struct_member, palette, "palette", {pointer, palette}, []},
        {struct_member, bits_per_pixel, "BitsPerPixel", uint8, []},
        {struct_member, bytes_per_pixel, "BytesPerPixel", uint8, []},
        {struct_member, r_mask, "Rmask", uint32, []},
        {struct_member, g_mask, "Gmask", uint32, []},
        {struct_member, b_mask, "Bmask", uint32, []},
        {struct_member, a_mask, "Amask", uint32, []},
        {struct_member, r_loss, "Rloss", uint8, [internal]},
        {struct_member, g_loss, "Gloss", uint8, [internal]},
        {struct_member, b_loss, "Bloss", uint8, [internal]},
        {struct_member, a_loss, "Aloss", uint8, [internal]},
        {struct_member, r_shift, "Rshift", uint8, [internal]},
        {struct_member, g_shift, "Gshift", uint8, [internal]},
        {struct_member, b_shift, "Bshift", uint8, [internal]},
        {struct_member, a_shift, "Ashift", uint8, [internal]},
        {struct_member, refcount, "refcount", int, [internal]},
        {struct_member, next, "next", {pointer, pixel_format}, [internal]}
      ]}, []},
    {type_spec, rect, "SDL_Rect",
      {struct, [
        {struct_member, x, "x", int, []},
        {struct_member, y, "y", int, []},
        {struct_member, w, "w", int, []},
        {struct_member, h, "h", int, []}
      ]}, []},
    {type_spec, blit_map, "struct SDL_BlitMap", {struct, opaque}, []},
    {type_spec, surface, "SDL_Surface",
      {struct, [
        {struct_member, flags, "flags", uint32, [internal]},
        {struct_member, format, "format", {pointer, pixel_format}, [read_only]},
        {struct_member, w, "w", int, [read_only]},
        {struct_member, h, "h", int, [read_only]},
        {struct_member, pitch, "pitch", int, [read_only]},
        {struct_member, pixels, "pixels", pointer, []},
        {struct_member, userdata, "userdata", pointer, []},
        {struct_member, locked, "locked", int, [internal]},
        {struct_member, lock_data, "lock_data", pointer, [internal]},
        {struct_member, clip_rect, "clip_rect", rect, [read_only]},
        {struct_member, map, "map", {pointer, blit_map}, [internal]},
        {struct_member, refcount, "refcount", int, []}
      ]}, [{destructor, free_surface}]},
    {type_spec, scancode, "SDL_Scancode",
      {enum, [
        {scancode_unknown, "SDL_SCANCODE_UNKNOWN", 0},
        {scancode_a, "SDL_SCANCODE_A", 4},
        {scancode_b, "SDL_SCANCODE_B", 5},
        {scancode_c, "SDL_SCANCODE_C", 6},
        {scancode_d, "SDL_SCANCODE_D", 7},
        {scancode_e, "SDL_SCANCODE_E", 8},
        {scancode_f, "SDL_SCANCODE_F", 9},
        {scancode_g, "SDL_SCANCODE_G", 10},
        {scancode_h, "SDL_SCANCODE_H", 11},
        {scancode_i, "SDL_SCANCODE_I", 12},
        {scancode_j, "SDL_SCANCODE_J", 13},
        {scancode_k, "SDL_SCANCODE_K", 14},
        {scancode_l, "SDL_SCANCODE_L", 15},
        {scancode_m, "SDL_SCANCODE_M", 16},
        {scancode_n, "SDL_SCANCODE_N", 17},
        {scancode_o, "SDL_SCANCODE_O", 18},
        {scancode_p, "SDL_SCANCODE_P", 19},
        {scancode_q, "SDL_SCANCODE_Q", 20},
        {scancode_r, "SDL_SCANCODE_R", 21},
        {scancode_s, "SDL_SCANCODE_S", 22},
        {scancode_t, "SDL_SCANCODE_T", 23},
        {scancode_u, "SDL_SCANCODE_U", 24},
        {scancode_v, "SDL_SCANCODE_V", 25},
        {scancode_w, "SDL_SCANCODE_W", 26},
        {scancode_x, "SDL_SCANCODE_X", 27},
        {scancode_y, "SDL_SCANCODE_Y", 28},
        {scancode_z, "SDL_SCANCODE_Z", 29},
        {scancode_1, "SDL_SCANCODE_1", 30},
        {scancode_2, "SDL_SCANCODE_2", 31},
        {scancode_3, "SDL_SCANCODE_3", 32},
        {scancode_4, "SDL_SCANCODE_4", 33},
        {scancode_5, "SDL_SCANCODE_5", 34},
        {scancode_6, "SDL_SCANCODE_6", 35},
        {scancode_7, "SDL_SCANCODE_7", 36},
        {scancode_8, "SDL_SCANCODE_8", 37},
        {scancode_9, "SDL_SCANCODE_9", 38},
        {scancode_0, "SDL_SCANCODE_0", 39},
        {scancode_return, "SDL_SCANCODE_RETURN", 40},
        {scancode_escape, "SDL_SCANCODE_ESCAPE", 41},
        {scancode_backspace, "SDL_SCANCODE_BACKSPACE", 42},
        {scancode_tab, "SDL_SCANCODE_TAB", 43},
        {scancode_space, "SDL_SCANCODE_SPACE", 44},
        {scancode_minus, "SDL_SCANCODE_MINUS", 45},
        {scancode_equals, "SDL_SCANCODE_EQUALS", 46},
        {scancode_leftbracket, "SDL_SCANCODE_LEFTBRACKET", 47},
        {scancode_rightbracket, "SDL_SCANCODE_RIGHTBRACKET", 48},
        {scancode_backslash, "SDL_SCANCODE_BACKSLASH", 49},
        {scancode_nonushash, "SDL_SCANCODE_NONUSHASH", 50},
        {scancode_semicolon, "SDL_SCANCODE_SEMICOLON", 51},
        {scancode_apostrophe, "SDL_SCANCODE_APOSTROPHE", 52},
        {scancode_grave, "SDL_SCANCODE_GRAVE", 53},
        {scancode_comma, "SDL_SCANCODE_COMMA", 54},
        {scancode_period, "SDL_SCANCODE_PERIOD", 55},
        {scancode_slash, "SDL_SCANCODE_SLASH", 56},
        {scancode_capslock, "SDL_SCANCODE_CAPSLOCK", 57},
        {scancode_f1, "SDL_SCANCODE_F1", 58},
        {scancode_f2, "SDL_SCANCODE_F2", 59},
        {scancode_f3, "SDL_SCANCODE_F3", 60},
        {scancode_f4, "SDL_SCANCODE_F4", 61},
        {scancode_f5, "SDL_SCANCODE_F5", 62},
        {scancode_f6, "SDL_SCANCODE_F6", 63},
        {scancode_f7, "SDL_SCANCODE_F7", 64},
        {scancode_f8, "SDL_SCANCODE_F8", 65},
        {scancode_f9, "SDL_SCANCODE_F9", 66},
        {scancode_f10, "SDL_SCANCODE_F10", 67},
        {scancode_f11, "SDL_SCANCODE_F11", 68},
        {scancode_f12, "SDL_SCANCODE_F12", 69},
        {scancode_printscreen, "SDL_SCANCODE_PRINTSCREEN", 70},
        {scancode_scrolllock, "SDL_SCANCODE_SCROLLLOCK", 71},
        {scancode_pause, "SDL_SCANCODE_PAUSE", 72},
        {scancode_insert, "SDL_SCANCODE_INSERT", 73},
        {scancode_home, "SDL_SCANCODE_HOME", 74},
        {scancode_pageup, "SDL_SCANCODE_PAGEUP", 75},
        {scancode_delete, "SDL_SCANCODE_DELETE", 76},
        {scancode_end, "SDL_SCANCODE_END", 77},
        {scancode_pagedown, "SDL_SCANCODE_PAGEDOWN", 78},
        {scancode_right, "SDL_SCANCODE_RIGHT", 79},
        {scancode_left, "SDL_SCANCODE_LEFT", 80},
        {scancode_down, "SDL_SCANCODE_DOWN", 81},
        {scancode_up, "SDL_SCANCODE_UP", 82},
        {scancode_numlockclear, "SDL_SCANCODE_NUMLOCKCLEAR", 83},
        {scancode_kp_divide, "SDL_SCANCODE_KP_DIVIDE", 84},
        {scancode_kp_multiply, "SDL_SCANCODE_KP_MULTIPLY", 85},
        {scancode_kp_minus, "SDL_SCANCODE_KP_MINUS", 86},
        {scancode_kp_plus, "SDL_SCANCODE_KP_PLUS", 87},
        {scancode_kp_enter, "SDL_SCANCODE_KP_ENTER", 88},
        {scancode_kp_1, "SDL_SCANCODE_KP_1", 89},
        {scancode_kp_2, "SDL_SCANCODE_KP_2", 90},
        {scancode_kp_3, "SDL_SCANCODE_KP_3", 91},
        {scancode_kp_4, "SDL_SCANCODE_KP_4", 92},
        {scancode_kp_5, "SDL_SCANCODE_KP_5", 93},
        {scancode_kp_6, "SDL_SCANCODE_KP_6", 94},
        {scancode_kp_7, "SDL_SCANCODE_KP_7", 95},
        {scancode_kp_8, "SDL_SCANCODE_KP_8", 96},
        {scancode_kp_9, "SDL_SCANCODE_KP_9", 97},
        {scancode_kp_0, "SDL_SCANCODE_KP_0", 98},
        {scancode_kp_period, "SDL_SCANCODE_KP_PERIOD", 99},
        {scancode_nonusbackslash, "SDL_SCANCODE_NONUSBACKSLASH", 100},
        {scancode_application, "SDL_SCANCODE_APPLICATION", 101},
        {scancode_power, "SDL_SCANCODE_POWER", 102},
        {scancode_kp_equals, "SDL_SCANCODE_KP_EQUALS", 103},
        {scancode_f13, "SDL_SCANCODE_F13", 104},
        {scancode_f14, "SDL_SCANCODE_F14", 105},
        {scancode_f15, "SDL_SCANCODE_F15", 106},
        {scancode_f16, "SDL_SCANCODE_F16", 107},
        {scancode_f17, "SDL_SCANCODE_F17", 108},
        {scancode_f18, "SDL_SCANCODE_F18", 109},
        {scancode_f19, "SDL_SCANCODE_F19", 110},
        {scancode_f20, "SDL_SCANCODE_F20", 111},
        {scancode_f21, "SDL_SCANCODE_F21", 112},
        {scancode_f22, "SDL_SCANCODE_F22", 113},
        {scancode_f23, "SDL_SCANCODE_F23", 114},
        {scancode_f24, "SDL_SCANCODE_F24", 115},
        {scancode_execute, "SDL_SCANCODE_EXECUTE", 116},
        {scancode_help, "SDL_SCANCODE_HELP", 117},
        {scancode_menu, "SDL_SCANCODE_MENU", 118},
        {scancode_select, "SDL_SCANCODE_SELECT", 119},
        {scancode_stop, "SDL_SCANCODE_STOP", 120},
        {scancode_again, "SDL_SCANCODE_AGAIN", 121},
        {scancode_undo, "SDL_SCANCODE_UNDO", 122},
        {scancode_cut, "SDL_SCANCODE_CUT", 123},
        {scancode_copy, "SDL_SCANCODE_COPY", 124},
        {scancode_paste, "SDL_SCANCODE_PASTE", 125},
        {scancode_find, "SDL_SCANCODE_FIND", 126},
        {scancode_mute, "SDL_SCANCODE_MUTE", 127},
        {scancode_volumeup, "SDL_SCANCODE_VOLUMEUP", 128},
        {scancode_volumedown, "SDL_SCANCODE_VOLUMEDOWN", 129},
        {scancode_kp_comma, "SDL_SCANCODE_KP_COMMA", 133},
        {scancode_kp_equalsas400, "SDL_SCANCODE_KP_EQUALSAS400", 134},
        {scancode_international1, "SDL_SCANCODE_INTERNATIONAL1", 135},
        {scancode_international2, "SDL_SCANCODE_INTERNATIONAL2", 136},
        {scancode_international3, "SDL_SCANCODE_INTERNATIONAL3", 137},
        {scancode_international4, "SDL_SCANCODE_INTERNATIONAL4", 138},
        {scancode_international5, "SDL_SCANCODE_INTERNATIONAL5", 139},
        {scancode_international6, "SDL_SCANCODE_INTERNATIONAL6", 140},
        {scancode_international7, "SDL_SCANCODE_INTERNATIONAL7", 141},
        {scancode_international8, "SDL_SCANCODE_INTERNATIONAL8", 142},
        {scancode_international9, "SDL_SCANCODE_INTERNATIONAL9", 143},
        {scancode_lang1, "SDL_SCANCODE_LANG1", 144},
        {scancode_lang2, "SDL_SCANCODE_LANG2", 145},
        {scancode_lang3, "SDL_SCANCODE_LANG3", 146},
        {scancode_lang4, "SDL_SCANCODE_LANG4", 147},
        {scancode_lang5, "SDL_SCANCODE_LANG5", 148},
        {scancode_lang6, "SDL_SCANCODE_LANG6", 149},
        {scancode_lang7, "SDL_SCANCODE_LANG7", 150},
        {scancode_lang8, "SDL_SCANCODE_LANG8", 151},
        {scancode_lang9, "SDL_SCANCODE_LANG9", 152},
        {scancode_alterase, "SDL_SCANCODE_ALTERASE", 153},
        {scancode_sysreq, "SDL_SCANCODE_SYSREQ", 154},
        {scancode_cancel, "SDL_SCANCODE_CANCEL", 155},
        {scancode_clear, "SDL_SCANCODE_CLEAR", 156},
        {scancode_prior, "SDL_SCANCODE_PRIOR", 157},
        {scancode_return2, "SDL_SCANCODE_RETURN2", 158},
        {scancode_separator, "SDL_SCANCODE_SEPARATOR", 159},
        {scancode_out, "SDL_SCANCODE_OUT", 160},
        {scancode_oper, "SDL_SCANCODE_OPER", 161},
        {scancode_crearagain, "SDL_SCANCODE_CLEARAGAIN", 162},
        {scancode_crsel, "SDL_SCANCODE_CRSEL", 163},
        {scancode_exsel, "SDL_SCANCODE_EXSEL", 164},
        {scancode_kp_00, "SDL_SCANCODE_KP_00", 176},
        {scancode_kp_000, "SDL_SCANCODE_KP_000", 177},
        {scancode_thousandsseparator, "SDL_SCANCODE_THOUSANDSSEPARATOR", 178},
        {scancode_decimalseparator, "SDL_SCANCODE_DECIMALSEPARATOR", 179},
        {scancode_currencyunit, "SDL_SCANCODE_CURRENCYUNIT", 180},
        {scancode_currencysubunit, "SDL_SCANCODE_CURRENCYSUBUNIT", 181},
        {scancode_kp_leftparen, "SDL_SCANCODE_KP_LEFTPAREN", 182},
        {scancode_kp_rightparen, "SDL_SCANCODE_KP_RIGHTPAREN", 183},
        {scancode_kp_leftbrace, "SDL_SCANCODE_KP_LEFTBRACE", 184},
        {scancode_kp_rightbrace, "SDL_SCANCODE_KP_RIGHTBRACE", 185},
        {scancode_kp_tab, "SDL_SCANCODE_KP_TAB", 186},
        {scancode_kp_backspace, "SDL_SCANCODE_KP_BACKSPACE", 187},
        {scancode_kp_a, "SDL_SCANCODE_KP_A", 188},
        {scancode_kp_b, "SDL_SCANCODE_KP_B", 189},
        {scancode_kp_c, "SDL_SCANCODE_KP_C", 190},
        {scancode_kp_d, "SDL_SCANCODE_KP_D", 191},
        {scancode_kp_e, "SDL_SCANCODE_KP_E", 192},
        {scancode_kp_f, "SDL_SCANCODE_KP_F", 193},
        {scancode_kp_xor, "SDL_SCANCODE_KP_XOR", 194},
        {scancode_kp_power, "SDL_SCANCODE_KP_POWER", 195},
        {scancode_kp_percent, "SDL_SCANCODE_KP_PERCENT", 196},
        {scancode_kp_less, "SDL_SCANCODE_KP_LESS", 197},
        {scancode_kp_greater, "SDL_SCANCODE_KP_GREATER", 198},
        {scancode_kp_ampersand, "SDL_SCANCODE_KP_AMPERSAND", 199},
        {scancode_kp_dblampersand, "SDL_SCANCODE_KP_DBLAMPERSAND", 200},
        {scancode_kp_verticalbar, "SDL_SCANCODE_KP_VERTICALBAR", 201},
        {scancode_kp_dblverticalbar, "SDL_SCANCODE_KP_DBLVERTICALBAR", 202},
        {scancode_kp_colon, "SDL_SCANCODE_KP_COLON", 203},
        {scancode_kp_hash, "SDL_SCANCODE_KP_HASH", 204},
        {scancode_kp_space, "SDL_SCANCODE_KP_SPACE", 205},
        {scancode_kp_at, "SDL_SCANCODE_KP_AT", 206},
        {scancode_kp_exclam, "SDL_SCANCODE_KP_EXCLAM", 207},
        {scancode_kp_memstore, "SDL_SCANCODE_KP_MEMSTORE", 208},
        {scancode_kp_memrecall, "SDL_SCANCODE_KP_MEMRECALL", 209},
        {scancode_kp_memclear, "SDL_SCANCODE_KP_MEMCLEAR", 210},
        {scancode_kp_memadd, "SDL_SCANCODE_KP_MEMADD", 211},
        {scancode_kp_memsubtract, "SDL_SCANCODE_KP_MEMSUBTRACT", 212},
        {scancode_kp_memultiply, "SDL_SCANCODE_KP_MEMMULTIPLY", 213},
        {scancode_kp_memdivide, "SDL_SCANCODE_KP_MEMDIVIDE", 214},
        {scancode_kp_plusminus, "SDL_SCANCODE_KP_PLUSMINUS", 215},
        {scancode_kp_clear, "SDL_SCANCODE_KP_CLEAR", 216},
        {scancode_kp_clearentry, "SDL_SCANCODE_KP_CLEARENTRY", 217},
        {scancode_kp_binary, "SDL_SCANCODE_KP_BINARY", 218},
        {scancode_kp_octal, "SDL_SCANCODE_KP_OCTAL", 219},
        {scancode_kp_decimal, "SDL_SCANCODE_KP_DECIMAL", 220},
        {scancode_kp_hexadecimal, "SDL_SCANCODE_KP_HEXADECIMAL", 221},
        {scancode_lctrl, "SDL_SCANCODE_LCTRL", 224},
        {scancode_lshift, "SDL_SCANCODE_LSHIFT", 225},
        {scancode_lalt, "SDL_SCANCODE_LALT", 226},
        {scancode_lgui, "SDL_SCANCODE_LGUI", 227},
        {scancode_rctrl, "SDL_SCANCODE_RCTRL", 228},
        {scancode_rshift, "SDL_SCANCODE_RSHIFT", 229},
        {scancode_ralt, "SDL_SCANCODE_RALT", 230},
        {scancode_rgui, "SDL_SCANCODE_RGUI", 231},
        {scancode_mode, "SDL_SCANCODE_MODE", 257},
        {scancode_audionext, "SDL_SCANCODE_AUDIONEXT", 258},
        {scancode_audioprev, "SDL_SCANCODE_AUDIOPREV", 259},
        {scancode_audiostop, "SDL_SCANCODE_AUDIOSTOP", 260},
        {scancode_audioplay, "SDL_SCANCODE_AUDIOPLAY", 261},
        {scancode_audiomute, "SDL_SCANCODE_AUDIOMUTE", 262},
        {scancode_mediaselect, "SDL_SCANCODE_MEDIASELECT", 263},
        {scancode_www, "SDL_SCANCODE_WWW", 264},
        {scancode_mail, "SDL_SCANCODE_MAIL", 265},
        {scancode_calculator, "SDL_SCANCODE_CALCULATOR", 266},
        {scancode_computer, "SDL_SCANCODE_COMPUTER", 267},
        {scancode_ac_search, "SDL_SCANCODE_AC_SEARCH", 268},
        {scancode_ac_home, "SDL_SCANCODE_AC_HOME", 269},
        {scancode_ac_back, "SDL_SCANCODE_AC_BACK", 270},
        {scancode_ac_forward, "SDL_SCANCODE_AC_FORWARD", 271},
        {scancode_ac_stop, "SDL_SCANCODE_AC_STOP", 272},
        {scancode_ac_refresh, "SDL_SCANCODE_AC_REFRESH", 273},
        {scancode_ac_bookmarks, "SDL_SCANCODE_AC_BOOKMARKS", 274},
        {scancode_brightnessdown, "SDL_SCANCODE_BRIGHTNESSDOWN", 275},
        {scancode_brightnessup, "SDL_SCANCODE_BRIGHTNESSUP", 276},
        {scancode_displayswitch, "SDL_SCANCODE_DISPLAYSWITCH", 277},
        {scancode_kbdillumtoggle, "SDL_SCANCODE_KBDILLUMTOGGLE", 278},
        {scancode_kbdillumdown, "SDL_SCANCODE_KBDILLUMDOWN", 279},
        {scancode_kbdillumup, "SDL_SCANCODE_KBDILLUMUP", 280},
        {scancode_eject, "SDL_SCANCODE_EJECT", 281},
        {scancode_sleep, "SDL_SCANCODE_SLEEP", 282},
        {scancode_app1, "SDL_SCANCODE_APP1", 283},
        {scancode_app2, "SDL_SCANCODE_APP2", 284},
        {scancode_audiorewind, "SDL_SCANCODE_AUDIOREWIND", 285},
        {scancode_audiofastforward, "SDL_SCANCODE_AUDIOFASTFORWARD", 286},
        {num_scancodes, "SDL_NUM_SCANCODES", 512}
      ]}, []},
    {type_spec, keycode, "SDL_Keycode", sint32, []},  % enum??
    {type_spec, keysym, "SDL_Keysym",
      {struct, [
        {struct_member, scancode, "scancode", scancode, []},
        {struct_member, sym, "sym", keycode, []},
        {struct_member, mod, "mod", uint16, []},
        {struct_member, unused, "unused", uint32, []}
      ]}, []},
    {type_spec, joystick_id, "SDL_JoystickID", sint32, []}, % enum??
    {type_spec, syswm_msg, "SDL_SysWMmsg", {struct, opaque}, []},
    {type_spec, touch_id, "SDL_TouchID", sint64, []}, %enum?
    {type_spec, finger_id, "SDL_FingerID", sint64, []}, %enum?
    {type_spec, gesture_id, "SDL_GestureID", sint64, []}, %enum?
    {type_spec, common_event, "SDL_CommonEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []}
      ]}, []},
    {type_spec, window_event, "SDL_WindowEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, windowID, "windowID", uint32, []},
        {struct_member, event, "event", uint8, []},
        {struct_member, padding1, "padding1", uint8, []},
        {struct_member, padding2, "padding2", uint8, []},
        {struct_member, padding3, "padding3", uint8, []},
        {struct_member, data1, "data1", sint32, []},
        {struct_member, data2, "data2", sint32, []}
      ]}, []},
    {type_spec, keyboard_event, "SDL_KeyboardEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, windowID, "windowID", uint32, []},
        {struct_member, state, "state", uint8, []},
        {struct_member, repeat, "repeat", uint8, []},
        {struct_member, padding2, "padding2", uint8, []},
        {struct_member, padding3, "padding3", uint8, []},
        {struct_member, keysym, "keysym", keysym, []}
      ]}, []},
    {type_spec, text_editing_event, "SDL_TextEditingEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, windowID, "windowID", uint32, []},
        {struct_member, text, "text", string, []},  % char[32]
        {struct_member, start, "start", sint32, []},
        {struct_member, length, "length", sint32, []}
      ]}, []},
    {type_spec, text_input_event, "SDL_TextInputEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, windowID, "windowID", uint32, []},
        {struct_member, text, "text", string, []}  % char[32]
      ]}, []},
    {type_spec, mouse_motion_event, "SDL_MouseMotionEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, windowID, "windowID", uint32, []},
        {struct_member, which, "which", uint32, []},
        {struct_member, state, "state", uint32, []},
        {struct_member, x, "x", sint32, []},
        {struct_member, y, "y", sint32, []},
        {struct_member, xrel, "xrel", sint32, []},
        {struct_member, yrel, "yrel", sint32, []}
      ]}, []},
    {type_spec, mouse_button_event, "SDL_MouseButtonEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, windowID, "windowID", uint32, []},
        {struct_member, which, "which", uint32, []},
        {struct_member, button, "button", uint8, []},
        {struct_member, state, "state", uint8, []},
        {struct_member, clicks, "clicks", uint8, []},
        {struct_member, x, "x", sint32, []},
        {struct_member, y, "y", sint32, []}
      ]}, []},
    {type_spec, mouse_wheel_event, "SDL_MouseWheelEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, windowID, "windowID", uint32, []},
        {struct_member, which, "which", uint32, []},
        {struct_member, x, "x", sint32, []},
        {struct_member, y, "y", sint32, []},
        {struct_member, direction, "direction", uint32, []}
      ]}, []},
    {type_spec, joy_axis_event, "SDL_JoyAxisEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, which, "which", joystick_id, []},
        {struct_member, axis, "axis", uint8, []},
        {struct_member, padding1, "padding1", uint8, []},
        {struct_member, padding2, "padding2", uint8, []},
        {struct_member, padding3, "padding3", uint8, []},
        {struct_member, value, "value", sint16, []}
      ]}, []},
    {type_spec, joy_ball_event, "SDL_JoyBallEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, which, "which", joystick_id, []},
        {struct_member, ball, "ball", uint8, []},
        {struct_member, padding1, "padding1", uint8, []},
        {struct_member, padding2, "padding2", uint8, []},
        {struct_member, padding3, "padding3", uint8, []},
        {struct_member, xrel, "xrel", sint16, []},
        {struct_member, yrel, "yrel", sint16, []}
      ]}, []},
    {type_spec, joy_hat_event, "SDL_JoyHatEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, which, "which", joystick_id, []},
        {struct_member, hat, "hat", uint8, []},
        {struct_member, value, "value", uint8, []},
        {struct_member, padding1, "padding1", uint8, []},
        {struct_member, padding2, "padding2", uint8, []}
      ]}, []},
    {type_spec, joy_button_event, "SDL_JoyButtonEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, which, "which", joystick_id, []},
        {struct_member, button, "button", uint8, []},
        {struct_member, state, "state", uint8, []},
        {struct_member, padding1, "padding1", uint8, []},
        {struct_member, padding2, "padding2", uint8, []}
      ]}, []},
    {type_spec, joy_device_event, "SDL_JoyDeviceEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, which, "which", sint32, []}
      ]}, []},
    {type_spec, controller_axis_event, "SDL_ControllerAxisEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, which, "which", joystick_id, []},
        {struct_member, axis, "axis", uint8, []},
        {struct_member, padding1, "padding1", uint8, []},
        {struct_member, padding2, "padding2", uint8, []},
        {struct_member, padding3, "padding3", uint8, []},
        {struct_member, value, "value", sint16, []},
        {struct_member, padding4, "padding4", uint16, []}
      ]}, []},
    {type_spec, controller_button_event, "SDL_ControllerButtonEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, which, "which", joystick_id, []},
        {struct_member, button, "button", uint8, []},
        {struct_member, state, "state", uint8, []},
        {struct_member, padding1, "padding1", uint8, []},
        {struct_member, padding2, "padding2", uint8, []}
      ]}, []},
    {type_spec, controller_device_event, "SDL_ControllerDeviceEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, which, "which", sint32, []}
      ]}, []},
    {type_spec, audio_device_event, "SDL_AudioDeviceEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, which, "which", uint32, []},
        {struct_member, iscapture, "iscapture", uint8, []},
        {struct_member, padding1, "padding1", uint8, []},
        {struct_member, padding2, "padding2", uint8, []},
        {struct_member, padding3, "padding3", uint8, []}
      ]}, []},
    {type_spec, quit_event, "SDL_QuitEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []}
      ]}, []},
    {type_spec, user_event, "SDL_UserEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, windowID, "windowID", uint32, []},
        {struct_member, code, "code", sint32, []},
        {struct_member, data1, "data1", pointer, []},
        {struct_member, data2, "data2", pointer, []}
      ]}, []},
    {type_spec, syswm_event, "SDL_SysWMEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, msg, "msg", {pointer, syswm_msg}, []}
      ]}, []},
    {type_spec, touch_finger_event, "SDL_TouchFingerEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, touchId, "touchId", touch_id, []},
        {struct_member, fingerId, "fingerId", finger_id, []},
        {struct_member, x, "x", float, []},
        {struct_member, y, "y", float, []},
        {struct_member, dx, "dx", float, []},
        {struct_member, dy, "dy", float, []},
        {struct_member, pressure, "pressure", float, []}
      ]}, []},
    {type_spec, multi_gesture_event, "SDL_MultiGestureEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, touchId, "touchId", touch_id, []},
        {struct_member, dTheta, "dTheta", float, []},
        {struct_member, dDist, "dDist", float, []},
        {struct_member, x, "x", float, []},
        {struct_member, y, "y", float, []},
        {struct_member, numFingers, "numFingers", uint16, []},
        {struct_member, padding, "padding", uint16, []}
      ]}, []},
    {type_spec, dollar_gesture_event, "SDL_DollarGestureEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, touchId, "touchId", touch_id, []},
        {struct_member, gestureId, "gestureId", gesture_id, []},
        {struct_member, numFingers, "numFingers", uint32, []},
        {struct_member, error, "error", float, []},
        {struct_member, x, "x", float, []},
        {struct_member, y, "y", float, []}
      ]}, []},
    {type_spec, drop_event, "SDL_DropEvent",
      {struct, [
        {struct_member, type, "type", uint32, []},
        {struct_member, timestamp, "timestamp", uint32, []},
        {struct_member, file, "file", string, []},
        {struct_member, windowID, "windowID", uint32, []}
      ]}, []},
    {type_spec, event, "SDL_Event",
      {union, [
        {struct_member, type, "type", uint32, []},
        {struct_member, common, "common", common_event, []},
        {struct_member, window, "window", window_event, []},
        {struct_member, key, "key", keyboard_event, []},
        {struct_member, edit, "edit", text_editing_event, []},
        {struct_member, text, "text", text_input_event, []},
        {struct_member, motion, "motion", mouse_motion_event, []},
        {struct_member, button, "button", mouse_button_event, []},
        {struct_member, wheel, "wheel", mouse_wheel_event, []},
        {struct_member, jaxis, "jaxis", joy_axis_event, []},
        {struct_member, jball, "jball", joy_ball_event, []},
        {struct_member, jhat, "jhat", joy_hat_event, []},
        {struct_member, jbutton, "jbutton", joy_button_event, []},
        {struct_member, jdevice, "jdevice", joy_device_event, []},
        {struct_member, caxis, "caxis", controller_axis_event, []},
        {struct_member, cbutton, "cbutton", controller_button_event, []},
        {struct_member, cdevice, "cdevice", controller_device_event, []},
        {struct_member, adevice, "adevice", audio_device_event, []},
        {struct_member, quit, "quit", quit_event, []},
        {struct_member, user, "user", user_event, []},
        {struct_member, syswm, "syswm", syswm_event, []},
        {struct_member, tfinger, "tfinger", touch_finger_event, []},
        {struct_member, mgesture, "mgesture", multi_gesture_event, []},
        {struct_member, dgesture, "dgesture", dollar_gesture_event, []},
        {struct_member, drop, "drop", drop_event, []}
      ]}, []}
  ],
  [
    {fun_spec, init, "SDL_Init", [
      {param_spec, uint32, []}
      ],
      int, []},
    {fun_spec, quit, "SDL_Quit", [],
      void, []},
    {fun_spec, create_window, "SDL_CreateWindow", [
      {param_spec, string, []},
      {param_spec, int, []},
      {param_spec, int, []},
      {param_spec, int, []},
      {param_spec, int, []},
      {param_spec, uint32, []}
      ],
      {pointer, window}, [auto_managed]},
    {fun_spec, get_window_surface, "SDL_GetWindowSurface", [
      {param_spec, {pointer, window}, []}
      ],
      {pointer, surface}, []},
    {fun_spec, load_bmp, "SDL_LoadBMP", [
      {param_spec, string, [const]}
      ],
      {pointer, surface}, [auto_managed]},
    {fun_spec, free_surface, "SDL_FreeSurface", [
      {param_spec, {pointer, surface}, []}
      ],
      void, []},
    {fun_spec, blit_surface, "SDL_BlitSurface", [
      {param_spec, {pointer, surface}, []},
      {param_spec, {pointer, rect}, [const]},
      {param_spec, {pointer, surface}, []},
      {param_spec, {pointer, rect}, []}
      ],
      int, []},
    {fun_spec, blit_scaled, "SDL_BlitScaled", [
      {param_spec, {pointer, surface}, []},
      {param_spec, {pointer, rect}, [const]},
      {param_spec, {pointer, surface}, []},
      {param_spec, {pointer, rect}, []}
      ],
      int, []},
    {fun_spec, update_window_surface, "SDL_UpdateWindowSurface", [
      {param_spec, {pointer, window}, []}
      ],
      int, []},
    {fun_spec, destroy_window, "SDL_DestroyWindow", [
      {param_spec, {pointer, window}, []}
      ],
      void, []},
    {fun_spec, get_window_size, "SDL_GetWindowSize", [
      {param_spec, {pointer, window}, []},
      {param_spec, {pointer, int}, [return]},
      {param_spec, {pointer, int}, [return]}
      ],
      void, []},
    {fun_spec, get_error, "SDL_GetError", [],
      string, []},
    {fun_spec, poll_event, "SDL_PollEvent", [
      {param_spec, {pointer, event}, [return]}
      ],
      int, []},
    {fun_spec, maxint, "max", [
      {param_spec, {pointer, int}, []},
      {param_spec, int, [{length_of, 1}, free_after]}
      ],
      int, []}
  ]
}.
